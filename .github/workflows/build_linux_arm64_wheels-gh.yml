# name: Build Linux arm64

# on:
#   workflow_dispatch:
#     inputs:
#       TAG_NAME:
#         description: 'Release Version Tag'
#         required: true
#   release:
#     types: [created]
#   push:
#     branches:
#       - main
#     paths-ignore:
#       - '**/*.md'
#   pull_request:
#     branches:
#       - main
#     paths-ignore:
#       - '**/*.md'


# jobs:
#   build_universal_wheel:
#     name: Build Universal Wheel (Linux ARM64)
#     runs-on: GH-Linux-ARM64
#     steps:
#       - name: Install Python build dependencies
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y make build-essential libssl-dev zlib1g-dev \
#             libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
#             libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev \
#             libffi-dev liblzma-dev
#       - name: Scan SQLite vulnerabilities with grype
#         run: |
#           # Install grype and required tools
#           curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
#           sudo apt-get update && sudo apt-get install -y jq lsb-release

#           # Detect OS distribution info
#           DISTRO_ID=$(lsb_release -si | tr '[:upper:]' '[:lower:]')
#           DISTRO_VERSION=$(lsb_release -sr)
#           echo "Detected OS: $DISTRO_ID:$DISTRO_VERSION"

#           # Update grype vulnerability database
#           grype db update

#           # Check SQLite vulnerabilities in installed packages
#           echo "Scanning SQLite packages for vulnerabilities..."
#           GRYPE_RAW_OUTPUT=$(grype dir:/var/lib/dpkg --distro "$DISTRO_ID:$DISTRO_VERSION" --scope all-layers 2>/dev/null || true)
#           echo "Raw grype output:"
#           echo "$GRYPE_RAW_OUTPUT"

#           SQLITE_SCAN_OUTPUT=$(echo "$GRYPE_RAW_OUTPUT" | grep -i sqlite || true)

#           if [ -n "$SQLITE_SCAN_OUTPUT" ]; then
#             echo "❌ SQLite vulnerabilities found in packages! Build should be reviewed."
#             echo "SQLite vulnerability details:"
#             echo "$SQLITE_SCAN_OUTPUT"
#             exit 1
#           else
#             echo "✅ No SQLite vulnerabilities found"
#           fi
#         continue-on-error: false
#       - name: Setup pyenv
#         run: |
#           curl https://pyenv.run | bash
#           export PATH="$HOME/.pyenv/bin:$PATH"
#           eval "$(pyenv init -)"
#           pyenv install 3.8:latest
#           pyenv install 3.9:latest
#           pyenv install 3.10:latest
#           pyenv install 3.11:latest
#           pyenv install 3.12:latest
#           pyenv install 3.13:latest
#           pyenv global 3.8 3.9 3.10 3.11 3.12 3.13

#           # Verify installations
#           echo "Installed versions:"
#           pyenv versions
#       - name: Verify pyenv installations
#         run: |
#           export PATH="$HOME/.pyenv/bin:$PATH"
#           eval "$(pyenv init -)"
#           echo "Installed Python versions:"
#           pyenv versions
#           echo ""
#           echo "Verifying all required Python versions are available:"
#           for version in 3.8 3.9 3.10 3.11 3.12 3.13; do
#             if ! pyenv versions --bare | grep -q "^$version"; then
#               echo "ERROR: Python $version is not installed!"
#               exit 1
#             fi
#             echo "✓ Python $version is installed"
#           done
#           echo "All Python versions verified successfully!"
#       - name: Install dependencies for all Python versions
#         run: |
#           export PATH="$HOME/.pyenv/bin:$PATH"
#           eval "$(pyenv init -)"
#           for version in 3.8 3.9 3.10 3.11 3.12 3.13; do
#             echo "Installing dependencies for Python $version"
#             pyenv shell $version
#             python -m pip install --upgrade pip
#             python -m pip install setuptools tox pandas pyarrow twine psutil deltalake wheel
#             pyenv shell --unset
#           done
#       - name: Install clang++ for Ubuntu
#         run: |
#           pwd
#           uname -a
#           wget https://apt.llvm.org/llvm.sh
#           chmod +x llvm.sh
#           sudo ./llvm.sh 19
#           which clang++-19
#           clang++-19 --version
#           sudo apt-get install -y make cmake ccache ninja-build yasm gawk wget
#           ccache -s
#       - name: Update git
#         run: |
#           sudo add-apt-repository ppa:git-core/ppa -y
#           sudo apt-get update
#           sudo apt-get install -y git
#           git --version
#       - uses: actions/checkout@v3
#         with:
#           fetch-depth: 0
#       - name: Update submodules
#         run: |
#           git submodule update --init --recursive --jobs 4
#       - name: ccache
#         uses: hendrikmuhs/ccache-action@v1.2
#         with:
#           key: ubuntu-24.04-aarch64
#           max-size: 5G
#           append-timestamp: true
#       - name: remove old clang and link clang-19 to clang
#         run: |
#           sudo rm -f /usr/bin/clang || true
#           sudo ln -s /usr/bin/clang-19 /usr/bin/clang
#           sudo rm -f /usr/bin/clang++ || true
#           sudo ln -s /usr/bin/clang++-19 /usr/bin/clang++
#           which clang++
#           clang++ --version
#       - name: Run chdb/build.sh
#         timeout-minutes: 600
#         run: |
#           export PATH="$HOME/.pyenv/bin:$PATH"
#           eval "$(pyenv init -)"
#           pyenv shell 3.8
#           export CC=/usr/bin/clang
#           export CXX=/usr/bin/clang++
#           bash ./chdb/build.sh
#           pyenv shell 3.8
#           bash -x ./chdb/test_smoke.sh
#         continue-on-error: false
#       - name: Run chdb/build/build_static_lib.sh
#         timeout-minutes: 600
#         run: |
#           export CC=/usr/bin/clang
#           export CXX=/usr/bin/clang++
#           export PATH="$HOME/.pyenv/bin:$PATH"
#           eval "$(pyenv init -)"
#           pyenv shell 3.8
#           bash ./chdb/build/build_static_lib.sh
#           pyenv shell --unset
#         continue-on-error: false
#       - name: Scan chdb libraries with grype
#         run: |
#           echo "Scanning chdb libraries for vulnerabilities..."

#           # Files to scan
#           FILES_TO_SCAN=""
#           [ -f libchdb.so ] && FILES_TO_SCAN="$FILES_TO_SCAN libchdb.so"
#           [ -f libchdb.a ] && FILES_TO_SCAN="$FILES_TO_SCAN libchdb.a"
#           FILES_TO_SCAN="$FILES_TO_SCAN $(find chdb/ \( -name "*.so" -o -name "*.dylib" \) 2>/dev/null || true)"

#           SQLITE_VULNERABILITIES_FOUND=false

#           for file in $FILES_TO_SCAN; do
#             if [ -f "$file" ]; then
#               echo "=== Scanning $file ==="
#               SCAN_OUTPUT=$(grype "$file" 2>/dev/null || true)
#               echo "$SCAN_OUTPUT"

#               if echo "$SCAN_OUTPUT" | grep -qi sqlite; then
#                 echo "❌ SQLite vulnerability found in $file"
#                 SQLITE_VULNERABILITIES_FOUND=true
#               fi
#             fi
#           done

#           if [ "$SQLITE_VULNERABILITIES_FOUND" = true ]; then
#             echo "❌ SQLite vulnerabilities detected in chdb libraries!"
#             exit 1
#           else
#             echo "✅ No SQLite vulnerabilities found in chdb libraries"
#           fi
#         continue-on-error: false
#       - name: Run libchdb stub in examples dir
#         run: |
#           bash -x ./examples/runStub.sh
#       - name: Check ccache statistics
#         run: |
#           ccache -s
#           ls -lh chdb
#           df -h
#       - name: Build wheels
#         run: |
#           export PATH="$HOME/.pyenv/bin:$PATH"
#           eval "$(pyenv init -)"
#           export CC=/usr/bin/clang
#           export CXX=/usr/bin/clang++
#           pyenv shell 3.8
#           make wheel
#       - name: Install patchelf from github
#         run: |
#           wget https://github.com/NixOS/patchelf/releases/download/0.18.0/patchelf-0.18.0-aarch64.tar.gz -O patchelf.tar.gz
#           tar -xvf patchelf.tar.gz
#           sudo cp bin/patchelf /usr/bin/
#           sudo chmod +x /usr/bin/patchelf
#           patchelf --version
#       - name: Audit wheels
#         run: |
#           python3 -m pip install auditwheel
#           auditwheel -v repair -w dist/ --plat manylinux_2_17_aarch64 dist/*.whl
#         continue-on-error: false
#       - name: Show files
#         run: |
#           # e.g: remove chdb-0.11.4-cp310-cp310-linux_aarch64.whl, keep chdb-0.11.4-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl
#           sudo rm -f dist/*linux_aarch64.whl
#           ls -lh dist
#         shell: bash
#       - name: Setup core dump collection
#         run: |
#           mkdir -p tmp/core
#           echo "tmp/core/core.%p" | sudo tee /proc/sys/kernel/core_pattern
#           ulimit -c unlimited
#       - name: Test wheel on all Python versions
#         run: |
#           export PATH="$HOME/.pyenv/bin:$PATH"
#           eval "$(pyenv init -)"
#           for version in 3.8 3.9 3.10 3.11 3.12 3.13; do
#             echo "Testing chdb on Python $version"
#             pyenv shell $version
#             python -m pip install dist/*.whl --force-reinstall
#             python -c "import chdb; res = chdb.query('select 1112222222,555', 'CSV'); print(f'Python $version: {res}')"
#             make test
#             pyenv shell --unset
#           done
#         continue-on-error: false
#       - name: Check and upload core files if present
#         if: always()
#         run: |
#           if ls tmp/core/core.* >/dev/null 2>&1; then
#             echo "CORE_FILES_FOUND=true" >> $GITHUB_ENV
#             tar -czvf core-files-linux-aarch64.tar.gz tmp/core/core.*
#             echo "Core files tar created: core-files-linux-aarch64.tar.gz"
#             ls -lh core-files-linux-aarch64.tar.gz
#           else
#             echo "CORE_FILES_FOUND=false" >> $GITHUB_ENV
#             echo "No core files found in tmp/core"
#           fi
#         continue-on-error: true
#       - name:  Upload core files if present
#         if: always() && env.CORE_FILES_FOUND == 'true'
#         uses: actions/upload-artifact@v4
#         with:
#           name: core-files-linux-aarch64
#           path: core-files-linux-aarch64.tar.gz
#       - name: Upload wheels to release
#         if: startsWith(github.ref, 'refs/tags/v')
#         run: |
#           gh release upload ${{ github.ref_name }} dist/*.whl --clobber
#         env:
#           GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#       - name: Packege libchdb.so
#         run: |
#           cp programs/local/chdb.h chdb.h
#           cp programs/local/chdb.hpp chdb.hpp
#           tar -czvf linux-aarch64-libchdb.tar.gz libchdb.so chdb.h chdb.hpp
#       - name: Package libchdb.a
#         run: |
#           cp programs/local/chdb.h chdb.h
#           cp programs/local/chdb.hpp chdb.hpp
#           tar -czvf linux-aarch64-libchdb-static.tar.gz libchdb.a chdb.h chdb.hpp
#       - name: Upload libchdb.so to release
#         if: startsWith(github.ref, 'refs/tags/v')
#         run: |
#           gh release upload ${{ github.ref_name }} linux-aarch64-libchdb.tar.gz --clobber
#         env:
#           GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#       - name: Upload libchdb.a to release
#         if: startsWith(github.ref, 'refs/tags/v')
#         run: |
#           gh release upload ${{ github.ref_name }} linux-aarch64-libchdb-static.tar.gz --clobber
#         env:
#           GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#       - uses: actions/upload-artifact@v4
#         with:
#           name: chdb-artifacts-linux-aarch64
#           path: |
#             ./dist/*.whl
#             ./linux-aarch64-libchdb.tar.gz
#             ./linux-aarch64-libchdb-static.tar.gz
#           overwrite: true
#       - name: Upload pypi
#         if: startsWith(github.ref, 'refs/tags/v')
#         run: |
#           export PATH="$HOME/.pyenv/bin:$PATH"
#           eval "$(pyenv init -)"
#           pyenv shell 3.8
#           python -m twine upload dist/*.whl
#         env:
#           TWINE_USERNAME: __token__
#           TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
